<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<refentry xml:id="function.php-getdns-general" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>php_getdns_general</refname>
  <refpurpose>Asynchronously perform a DNS query for records of a specified type.</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>php_getdns_general</methodname>
   <methodparam><type>int</type><parameter>context</parameter></methodparam>
   <methodparam><type>string</type><parameter>name</parameter></methodparam>
   <methodparam><type>int</type><parameter>reqType</parameter></methodparam>
   <methodparam><type>int</type><parameter>extensions</parameter></methodparam>
   <methodparam><type>array</type><parameter>userArg</parameter></methodparam>
   <methodparam><type>mixed</type><parameter role="reference">transID</parameter></methodparam>
  </methodsynopsis>
  <para>
   This function provides an entry point into the getdns API library to asynchronously retrieve any
   valid responses to a query from the DNS; note that other namespaces in the context
   are not used. Most typical use cases for applications are probably satisifed via
   calls to php_getdns_address_sync(), which would replace getaddrinfo().
   See php_getdns_general_sync() for a description of the response data structure.
  </para>
  <para>
   Note that this function enqueues an event that must be processed to produce
   queries and return results. Calling php_context_run() after calling this
   function will ensure that all queued events are processed.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>context</parameter></term>
    <listitem>
     <para>
      The previously created DNS context that is to be used with this request.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>name</parameter></term>
    <listitem>
     <para>
      The ASCII-based domain name to be looked up as a string. This can also be an
      IPv4 or IPv6 address for request types that take addresses instead of domain
      names, such as PTR. The values here follow the rules in section 2.1 of
      <link xlink:href="http://tools.ietf.org/rfc/rfc4343.txt">RFC 4343</link>
      to allow non-ASCII octets and special characters in labels.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>reqType</parameter></term>
    <listitem>
     <para>
      The RRtype for the query; the RRtype numbers are listed in the IANA registry.
      For example, to get the NS records reqType would be 2. This extension has defined
      constants for most of the RRtypes by name; the definition names all start with
      &quot;GETDNS_RRTYPE_&quot;. For example, to get the NS records you can also set
      the reqType to GETDNS_RRTYPE_NS.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>extensions</parameter></term>
    <listitem>
     <para>
      The extensions dictionary for this request; NULL or 0 (zero) if no extensions.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>userArg</parameter></term>
    <listitem>
     <para>
      An indexed array that contains information used to control callback
      processing. The first element of the array must contain a character
      string representing the name of the PHP client function that will
      receive and process the result of the DNS query. Additional array
      elements are optional and may be included to be passed to the
      callback function. The callback function will receive the complete
      array for local processing with all elements included as specified.
     </para>
     <para>
      The callback function should be declared as follows:
      <programlisting>
        function_name($dict, $callbackType, $userArg, $transID)
        // $dict: An int representing the dictionary containing the response.
        // $callbackType: The getdns callback type.
        // $userArg: The original user arguments provided by the caller.
        // $transID: A 16-character string in hex format that contains the identifier of the transaction being processed.
      </programlisting>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>transID</parameter></term>
    <listitem>
     <para>
      A 16-character string value in hexadecimal format representing an unsigned
      64-bit integer that is filled in by the function to identify the callback
      being made. This value is passed by reference and any existing value will
      be overwritten; an empty string ("") is acceptable on input. It can also
      be NULL, in which case it is ignored and no value is assigned.
      The php_getdns_cancel_callback() function uses the transID to determine which
      callback is to be cancelled.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   This function returns an integer response code. GETDNS_RETURN_GOOD indicates successful completion.
  </para>
 </refsect1>


</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
